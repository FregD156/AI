import tkinter as tk
from tkinter import ttk, messagebox
from tkinter import font as tkfont
import random                                      
from sklearn.neighbors import KNeighborsClassifier  
import webbrowser                                
import time
import re
from collections import Counter

# ƒë·∫∑t quy t·∫Øc cho input h·ªç t√™n, email, sƒët
def is_valid_name(name):
    return name.replace(" ", "").isalpha()

def is_valid_email(email):
    return re.match(r"^[\w\.-]+@[\w\.-]+\.\w+$", email)

def is_valid_phone(phone):
    return phone.isdigit() and len(phone) >= 10

def is_valid_score(score):
    try:
        val = float(score)
        return 5.0 <= val <= 10.0
    except ValueError:
        return False

all_skills = list(range(1, 11)) # t·∫°o list t·ª´ 1 -> 10

# k·ªπ nƒÉng t∆∞∆°ng ·ª©ng v·ªõi list all_skills
skill_names = [
    "T∆∞ duy logic", "Giao ti·∫øp", "S√°ng t·∫°o", "Ph√¢n t√≠ch", "L√†m vi·ªác nh√≥m",
    "Ngo·∫°i ng·ªØ", "Qu·∫£n l√Ω th·ªùi gian", "Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ", "L√£nh ƒë·∫°o", "L·∫≠p tr√¨nh"
]

majors = [
    #("t√™n ng√†nh", danh s√°ch kh·ªëi thi, m√¥n s·ªü tr∆∞·ªùng, k·ªπ nƒÉng)
    ("C√¥ng ngh·ªá th√¥ng tin", [1, 5], 1, [1, 10]),
    ("K·ªπ thu·∫≠t ƒëi·ªán", [1, 5], 2, [1, 8]),
    ("Y h·ªçc", [2, 5], 3, [4, 7]),
    ("Kinh t·∫ø", [1, 4], 1, [2, 9]),
    ("Marketing", [1, 3, 4], 3, [2, 3]),
    ("D∆∞·ª£c h·ªçc", [2, 5], 4, [4, 7]),
    ("S∆∞ ph·∫°m VƒÉn", [3, 4], 5, [3, 2]),
    ("Ng√¥n ng·ªØ Anh", [4], 6, [6, 2]),
    ("C√¥ng ngh·ªá th·ª±c ph·∫©m", [1, 2], 1, [4, 8]),
    ("K·ªπ thu·∫≠t c∆° kh√≠", [1, 5], 2, [1, 8]),
    ("B√°o ch√≠", [3, 4], 5, [3, 2]),
    ("Qu·∫£n tr·ªã kinh doanh", [1, 4], 6, [2, 9]),
    ("Khoa h·ªçc m√°y t√≠nh", [1, 5], 1, [1, 10]),
    ("Kinh doanh qu·ªëc t·∫ø", [1, 4], 3, [2, 6]),
    ("ƒêi·ªÅu d∆∞·ª°ng", [2, 5], 4, [5, 7]),
    ("Qu·∫£n l√Ω nh√† n∆∞·ªõc", [3, 4], 5, [3, 2]),
    ("K·ªπ thu·∫≠t x√¢y d·ª±ng", [1, 5], 2, [1, 8]),
]

khoi_mon_map = {
    1: ["To√°n", "L√Ω", "H√≥a"],
    2: ["To√°n", "H√≥a", "Sinh"],
    3: ["VƒÉn", "S·ª≠", "ƒê·ªãa"],
    4: ["To√°n", "VƒÉn", "Anh"],
    5: ["To√°n", "L√Ω", "Anh"],
    6: ["VƒÉn", "S·ª≠", "GDCD"]
}

khoi_name_map = {
    "A00": 1,
    "B00": 2,
    "C00": 3,
    "D01": 4,
    "A01": 5,
    "C19": 6
} 

mon_name_to_code = {
    "To√°n": 1, "L√Ω": 2, "H√≥a": 3, "Sinh": 4,
    "VƒÉn": 5, "Anh": 6, "S·ª≠": 7, "ƒê·ªãa": 8, "GDCD": 9
}

X_train, y_train = [], [] # bi·∫øn ƒë·∫ßu v√†o/ra

#c·∫•u h√¨nh sinh s·ªë m·∫´u v√† ph·ªï ƒëi·ªÉm ("t√™n ng√†nh": (s·ªë m·∫´u, (ph·ªï ƒëi·ªÉm)))
phan_bo_nganh = {
    "C√¥ng ngh·ªá th√¥ng tin": (100, (7.5, 10)),
    "K·ªπ thu·∫≠t ƒëi·ªán": (80, (7, 9.5)),
    "Y h·ªçc": (100, (8, 10)),
    "Kinh t·∫ø": (90, (7, 9)),
    "Marketing": (80, (6.5, 9)),
    "D∆∞·ª£c h·ªçc": (100, (8, 10)),
    "S∆∞ ph·∫°m VƒÉn": (80, (5.5, 9)),
    "Ng√¥n ng·ªØ Anh": (70, (6, 9)),
    "C√¥ng ngh·ªá th·ª±c ph·∫©m": (70, (6, 8.5)),
    "K·ªπ thu·∫≠t c∆° kh√≠": (80, (6.5, 9)),
    "B√°o ch√≠": (60, (5.5, 8.5)),
    "Qu·∫£n tr·ªã kinh doanh": (90, (7, 9.5)),
    "Khoa h·ªçc m√°y t√≠nh": (90, (7.5, 10)),
    "Kinh doanh qu·ªëc t·∫ø": (80, (7, 9)),
    "ƒêi·ªÅu d∆∞·ª°ng": (70, (6, 8.5)),
    "Qu·∫£n l√Ω nh√† n∆∞·ªõc": (70, (6, 8)),
    "K·ªπ thu·∫≠t x√¢y d·ª±ng": (80, (6.5, 9)),    
}

# v√≤ng l·∫∑p sinh d·ªØ li·ªáu
for major, khoi_list, mon_so_truong, must_have_skills in majors:
    so_mau, (min_diem, max_diem) = phan_bo_nganh[major]
    
    for khoi in khoi_list:
        mon_names = khoi_mon_map[khoi]
        
        for _ in range(so_mau):
            diem = [round(random.uniform(min_diem, max_diem), 1) for _ in range(3)]
            if mon_so_truong in [mon_name_to_code[m] for m in mon_names]:
                for i, mon in enumerate(mon_names):
                    if mon_name_to_code[mon] == mon_so_truong:
                        diem[i] = round(min(diem[i] + 1.0, 10), 1)
            skill = random.choice(must_have_skills)
            X_train.append([*diem, khoi, skill])
            y_train.append(major)

# hu·∫•n luy·ªán m√¥ h√¨nh AI
model = KNeighborsClassifier(n_neighbors=15) # k = 15
model.fit(X_train, y_train)

# M√†u s·∫Øc ch·ªß ƒë·∫°o
PRIMARY_COLOR = "#3498db"
SECONDARY_COLOR = "#2980b9"
ACCENT_COLOR = "#e74c3c"
BG_COLOR = "#f5f7fa"
TEXT_COLOR = "#2c3e50"
LIGHT_TEXT = "#ecf0f1"

# T·∫°o ·ª©ng d·ª•ng
app = tk.Tk()
app.title("H·ªá Th·ªëng T∆∞ V·∫•n Ng√†nh H·ªçc Th√¥ng Minh")
app.geometry("900x700")
app.configure(bg=BG_COLOR)
app.resizable(True, True)

# T·∫°o style m·ªõi
style = ttk.Style()
style.theme_use('clam')

# C·∫•u h√¨nh style
style.configure('TFrame', background=BG_COLOR)
style.configure('TLabel', background=BG_COLOR, foreground=TEXT_COLOR, font=('Helvetica', 11))
style.configure('TButton', font=('Helvetica', 11, 'bold'), borderwidth=1)
style.configure('TCombobox', font=('Helvetica', 11))
style.configure('TEntry', font=('Helvetica', 11))

style.map('TButton',
          foreground=[('active', LIGHT_TEXT), ('!active', LIGHT_TEXT)],
          background=[('active', SECONDARY_COLOR), ('!active', PRIMARY_COLOR)])

# Header
header_frame = ttk.Frame(app, style='TFrame')
header_frame.pack(fill=tk.X, padx=10, pady=10)

title_font = tkfont.Font(family='Helvetica', size=18, weight='bold')
title_label = ttk.Label(header_frame, 
                       text="D&H AI for Education 5.0", 
                       font=title_font,
                       foreground=PRIMARY_COLOR)
title_label.pack(pady=10)

# Main content - Notebook (tabbed interface)
notebook = ttk.Notebook(app)
notebook.pack(expand=True, fill=tk.BOTH, padx=10, pady=5)

# --- Giao di·ªán ch√≠nh ---   
# Tab 1: Th√¥ng tin c√° nh√¢n
personal_frame = ttk.Frame(notebook)
notebook.add(personal_frame, text="Th√¥ng Tin C√° Nh√¢n")

# Form th√¥ng tin c√° nh√¢n
form_frame = ttk.Frame(personal_frame, style='TFrame')
form_frame.pack(fill=tk.BOTH, expand=True, padx=40, pady=40)

ttk.Label(form_frame, text="üë§ H·ªç v√† t√™n:", font=('Helvetica', 15, 'bold')).grid(row=0, column=0, sticky="w", pady=15)
name_entry = ttk.Entry(form_frame, width=50)
name_entry.grid(row=0, column=1, sticky="ew", pady=10)

ttk.Label(form_frame, text="üìß Email:", font=('Helvetica', 15, 'bold')).grid(row=1, column=0, sticky="w", pady=15)
email_entry = ttk.Entry(form_frame, width=50)
email_entry.grid(row=1, column=1, sticky="ew", pady=10)

ttk.Label(form_frame, text="üìû S·ªë ƒëi·ªán tho·∫°i:", font=('Helvetica', 15, 'bold')).grid(row=2, column=0, sticky="w", pady=15)
phone_entry = ttk.Entry(form_frame, width=50)
phone_entry.grid(row=2, column=1, sticky="ew", pady=10)

ttk.Label(form_frame, text="üè¢ Khu v·ª±c:", font=('Helvetica', 15, 'bold')).grid(row=3, column=0, sticky="w", pady=15)
area_combo = ttk.Combobox(form_frame, values=["Mi·ªÅn B·∫Øc", "Mi·ªÅn Trung", "Mi·ªÅn Nam"], state="readonly")
area_combo.grid(row=3, column=1, sticky="ew", pady=10)

ttk.Label(form_frame, text="üîë S·ªü th√≠ch:", font=('Helvetica', 15, 'bold')).grid(row=4, column=0, sticky="w", pady=15)
hobbies_entry = ttk.Entry(form_frame, width=50)
hobbies_entry.grid(row=4, column=1, sticky="ew", pady=10)

ttk.Label(form_frame, text="üì∏ T√†i ch√≠nh:", font = ('HeHelvetica', 15, 'bold')).grid(row=5, column=0, sticky="w", pady=15)
money_combo = ttk.Combobox(form_frame,
                          values=["D∆∞·ªõi 5 tri·ªáu", "5 - 10 tri·ªáu", "10 - 20 tri·ªáu", "Tr√™n 20 tri·ªáu"],
                          state="readonly")
money_combo.grid(row=5, column=1, sticky="ew", pady=10)
# Tab 2: Th√¥ng tin h·ªçc t·∫≠p
study_frame = ttk.Frame(notebook)
notebook.add(study_frame, text="Th√¥ng Tin H·ªçc T·∫≠p")

# Form th√¥ng tin h·ªçc t·∫≠p
study_form_frame = ttk.Frame(study_frame, style='TFrame')
study_form_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

# Kh·ªëi thi
ttk.Label(study_form_frame, text="Ch·ªçn kh·ªëi thi:", font=('Helvetica', 15, 'bold')).grid(row=0, column=0, sticky="w", pady=10)
khoi_str_var = tk.StringVar(value="A00")
khoi_combo = ttk.Combobox(study_form_frame, values=list(khoi_name_map.keys()), textvariable=khoi_str_var, state="readonly", width=20)
khoi_combo.grid(row=0, column=1, sticky="w", pady=10)

# ƒêi·ªÉm 3 m√¥n
mon_labels = []
mon_entries = []

def update_mon_labels(event=None):
    khoi = khoi_name_map.get(khoi_str_var.get(), 1)
    mon_names = khoi_mon_map.get(khoi, ["M√¥n1", "M√¥n2", "M√¥n3"])
    for i in range(3):
        mon_labels[i].config(text=f"{mon_names[i]}:")
    auto_handle_so_truong()

def auto_handle_so_truong(event=None):
    try:
        khoi = khoi_name_map.get(khoi_str_var.get(), 1)
        mon_names = khoi_mon_map.get(khoi, ["M√¥n1", "M√¥n2", "M√¥n3"])
        diem = [float(e.get()) for e in mon_entries if e.get() != ""]
        
        if len(diem) < 3:
            # Ch∆∞a ƒë·ªß ƒëi·ªÉm, ·∫©n combobox
            so_truong_combo.grid_remove()
            so_truong_label.grid_remove()
            so_truong_var.set("")
            return

        max_score = max(diem)
        candidates = [i for i, d in enumerate(diem) if abs(d - max_score) <= 0.5]

        if len(candidates) <= 1:
            # Ch·ªâ c√≥ 1 m√¥n m·∫°nh ‚Üí ·∫©n combobox
            so_truong_combo.grid_remove()
            so_truong_label.grid_remove()
            so_truong_var.set("")
        else:
            # C√≥ nhi·ªÅu m√¥n m·∫°nh ‚Üí hi·ªán combobox ch·ªçn
            mon_options = [mon_names[i] for i in candidates]
            so_truong_combo['values'] = mon_options
            so_truong_combo.grid()
            so_truong_label.grid()
            # N·∫øu m√¥n ƒë√£ ch·ªçn kh√¥ng c√≤n h·ª£p l·ªá ‚Üí reset
            if so_truong_var.get() not in mon_options:
                so_truong_var.set("")
    except:
        pass  # L·ªói nh·∫π do ƒëi·ªÉm ch∆∞a ƒë·∫ßy ƒë·ªß ho·∫∑c ch∆∞a h·ª£p l·ªá

for i in range(3):
    lbl = ttk.Label(study_form_frame, text=f"M√¥n {i+1}:", font=('Helvetica', 15, 'bold'))
    lbl.grid(row=i+1, column=0, sticky="w", pady=15)
    ent = ttk.Entry(study_form_frame, width=40)
    ent.grid(row=i+1, column=1, sticky="w", pady=15)
    mon_labels.append(lbl)
    mon_entries.append(ent)
    for ent in mon_entries:
        ent.bind("<KeyRelease>", auto_handle_so_truong)

khoi_combo.bind("<<ComboboxSelected>>", update_mon_labels)
update_mon_labels()

# K·ªπ nƒÉng n·ªïi b·∫≠t
ttk.Label(study_form_frame, text="K·ªπ nƒÉng n·ªïi b·∫≠t:", font=('Helvetica', 15, 'bold')).grid(row=4, column=0, sticky="w", pady=15)
skill_var = tk.StringVar()
skill_combo = ttk.Combobox(study_form_frame, values=skill_names, textvariable=skill_var, state="readonly", width=40)
skill_combo.grid(row=4, column=1, sticky="w", pady=15)

# M√¥n s·ªü tr∆∞·ªùng (·∫©n m·∫∑c ƒë·ªãnh)
so_truong_var = tk.StringVar()
so_truong_combo = ttk.Combobox(study_form_frame, textvariable=so_truong_var, state="readonly", width=15)
so_truong_label = ttk.Label(study_form_frame, text="M√¥n s·ªü tr∆∞·ªùng:", font=('Helvetica', 15, 'bold'))
so_truong_combo.grid(row=5, column=1, sticky="w", pady=15)
so_truong_label.grid(row=5, column=0, sticky="w", pady=15)
so_truong_combo.grid_remove()
so_truong_label.grid_remove()
so_truong_var.set("")

# Button v·ªõi hi·ªáu ·ª©ng hover
def on_enter(e):
    e.widget['background'] = SECONDARY_COLOR

def on_leave(e):
    e.widget['background'] = PRIMARY_COLOR

submit_btn = tk.Button(study_form_frame, 
                      text="T∆Ø V·∫§N NG√ÄNH H·ªåC", 
                      bg=PRIMARY_COLOR, 
                      fg=LIGHT_TEXT,
                      font=('Helvetica', 15, 'bold'),
                      bd=0,
                      padx=20,
                      pady=10,
                      command=lambda: predict())
submit_btn.grid(row=6, column=0, columnspan=2, pady=20)
submit_btn.bind("<Enter>", on_enter)
submit_btn.bind("<Leave>", on_leave)

# Tab 3: K·∫øt qu·∫£
result_frame = ttk.Frame(notebook)
notebook.add(result_frame, text="K·∫øt Qu·∫£ T∆∞ V·∫•n", state='disabled')  # Disabled until results are ready

# K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y
result_text = tk.Text(result_frame, wrap=tk.WORD, bg=BG_COLOR, fg=TEXT_COLOR, font=('Helvetica', 11))
result_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
result_text.insert(tk.END, "K·∫øt qu·∫£ t∆∞ v·∫•n s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·∫°i ƒë√¢y sau khi b·∫°n nh·∫•n n√∫t 'T∆∞ v·∫•n ng√†nh h·ªçc'")
result_text.config(state=tk.DISABLED)

# Footer
footer_frame = ttk.Frame(app, style='TFrame')
footer_frame.pack(fill=tk.X, padx=10, pady=5)

def open_website():
    webbrowser.open("https://tuyensinh.moet.gov.vn/ts/")

footer_label = ttk.Label(footer_frame, 
                        text="¬© 2025 D&H H·ªá Th·ªëng T∆∞ V·∫•n Ng√†nh H·ªçc | Li√™n h·ªá: DH@tuvannghanh.utt.vn |\n  "
                            "·ª®ng d·ª•ng n√†y ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi D&H nh·∫±m gi√∫p h·ªçc sinh THPT l·ª±a ch·ªçn ng√†nh h·ªçc ph√π h·ª£p \n "
                            "d·ª±a tr√™n ƒëi·ªÉm thi v√† s·ªü th√≠ch c√° nh√¢n.\n"
                            "* G·ª£i √Ω t∆∞ v·∫•n ng√†nh h·ªçc ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o." ,
                        font=('Helvetica', 9),
                        foreground=TEXT_COLOR)
footer_label.pack(side=tk.LEFT)

website_btn = ttk.Button(footer_frame, text="C·ªïng th√¥ng tin tuy·ªÉn sinh", command=open_website)
website_btn.pack(side=tk.RIGHT)

# H√†m x·ª≠ l√Ω d·ª± ƒëo√°n v·ªõi animation
def predict():
    try:
        # Ki·ªÉm tra th√¥ng tin c√° nh√¢n
        name = name_entry.get().strip()
        email = email_entry.get().strip()
        phone = phone_entry.get().strip()

        if not is_valid_name(name):
            messagebox.showerror("L·ªói", "H·ªç t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i.")
            submit_btn.config(text="T∆Ø V·∫§N NG√ÄNH H·ªåC", state=tk.NORMAL)
            return

        if not is_valid_email(email):
            messagebox.showerror("L·ªói", "Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.")
            submit_btn.config(text="T∆Ø V·∫§N NG√ÄNH H·ªåC", state=tk.NORMAL)
            return

        if not is_valid_phone(phone):
            messagebox.showerror("L·ªói", "S·ªë ƒëi·ªán tho·∫°i ch·ªâ ƒë∆∞·ª£c ch·ª©a s·ªë v√† t·ªëi thi·ªÉu 10 ch·ªØ s·ªë.")
            submit_btn.config(text="T∆Ø V·∫§N NG√ÄNH H·ªåC", state=tk.NORMAL)
            return

        # Hi·ªáu ·ª©ng loading
        submit_btn.config(text="ƒêANG PH√ÇN T√çCH...", state=tk.DISABLED)
        app.update()
        
        # Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω
        time.sleep(1)
        
        # L·∫•y d·ªØ li·ªáu t·ª´ form
        khoi = khoi_name_map.get(khoi_str_var.get(), 1) # l·∫•y m√£ s·ªë t∆∞∆°ng ·ª©ng v·ªõi t√™n kh·ªëi
        mon_names = khoi_mon_map[khoi]                  # l·∫•y t√™n c√°c m√¥n t∆∞ng ·ª©ng v·ªõi t√™n kh·ªëi

        diem = []
        for i, e in enumerate(mon_entries):
            val = e.get().strip()
            if val == "":
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ƒëi·ªÉm cho 3 m√¥n.")
                submit_btn.config(text="T∆Ø V·∫§N NG√ÄNH H·ªåC", state=tk.NORMAL)
                return
            if not is_valid_score(val):
                messagebox.showerror("L·ªói", f"ƒêi·ªÉm ph·∫£i l√† s·ªë t·ª´ 5.0 ƒë·∫øn 10.0.")
                submit_btn.config(text="T∆Ø V·∫§N NG√ÄNH H·ªåC", state=tk.NORMAL)
                return
            diem.append(float(val))
            
        diem = [float(e.get()) for e in mon_entries] # √©p ki·ªÉu string -> float

        skill = skill_var.get()
        if skill not in skill_names:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn k·ªπ nƒÉng n·ªïi b·∫≠t.")
            submit_btn.config(text="T∆Ø V·∫§N NG√ÄNH H·ªåC", state=tk.NORMAL)
            return
            
        skill_index = skill_names.index(skill) + 1 # ƒë∆∞a kƒ© nƒÉng v·ªÅ d·∫°ng ch·ªâ s·ªë

        max_score = max(diem)
        candidates = [i for i, d in enumerate(diem) if abs(d - max_score) <= 0.5]
        mon_options = [mon_names[i] for i in candidates]

        if len(candidates) == 1:
            index_so_truong = candidates[0]
        else:
            selected = so_truong_var.get()
            if selected not in mon_options:
                messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn m√¥n s·ªü tr∆∞·ªùng trong danh s√°ch hi·ªÉn th·ªã.")
                submit_btn.config(text="T∆Ø V·∫§N NG√ÄNH H·ªåC", state=tk.NORMAL)
                return
            index_so_truong = mon_names.index(selected)

        # TƒÉng nh·∫π ƒëi·ªÉm m√¥n s·ªü tr∆∞·ªùng
        diem[index_so_truong] = min(diem[index_so_truong] + 0.5, 10)

        # D·ª± ƒëo√°n
        input_data = [*diem, khoi, skill_index]

        # L·∫•y 15 h√†ng x√≥m g·∫ßn nh·∫•t
        distances, indices = model.kneighbors([input_data], n_neighbors=15)

        # ƒê·∫øm s·ªë l·∫ßn m·ªói ng√†nh xu·∫•t hi·ªán trong c√°c h√†ng x√≥m ph√π h·ª£p kh·ªëi thi
        counter = Counter()
        for i in indices[0]:
            major = y_train[i]
            # Ch·ªâ t√≠nh ng√†nh c√≥ kh·ªëi thi ph√π h·ª£p
            for m in majors:
                if m[0] == major and khoi in m[1]:
                    counter[major] += 1
                    break

        # L·∫•y top 3 ng√†nh
        filtered_top = counter.most_common(3)

        # T√°ch danh s√°ch ng√†nh v√† t√≠nh t·ª∑ l·ªá xu·∫•t hi·ªán
        top_majors = [m for m, _ in filtered_top]
        top_probs = [count / len(indices[0]) for _, count in filtered_top]  # v√≠ d·ª•: 9/15 = 0.6

        if not top_majors:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y ng√†nh ph√π h·ª£p v·ªõi kh·ªëi thi ƒë√£ ch·ªçn.")
            submit_btn.config(text="T∆Ø V·∫§N NG√ÄNH H·ªåC", state=tk.NORMAL)
            return

        diem[index_so_truong] = min(diem[index_so_truong] - 0.5, 10)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        notebook.tab(2, state='normal')  # Enable results tab
        notebook.select(2)  # Show results tab
        
        result_text.config(state=tk.NORMAL)
        result_text.delete(1.0, tk.END)
        
        # Hi·ªÉn th·ªã th√¥ng tin c√° nh√¢n
        personal_info = f"Th√¥ng tin c√° nh√¢n:\n"
        personal_info += f"- H·ªç t√™n: {name_entry.get()}\n"
        personal_info += f"- Email: {email_entry.get()}\n"
        personal_info += f"- SƒêT: {phone_entry.get()}\n"
        personal_info += f"- Khu v·ª±c: {area_combo.get()}\n"
        personal_info += f"- S·ªü th√≠ch: {hobbies_entry.get()}\n"
        personal_info += f"- T√†i ch√≠nh: {money_combo.get()}\n\n"
        
        result_text.insert(tk.END, personal_info)
        
        # Hi·ªÉn th·ªã th√¥ng tin h·ªçc t·∫≠p
        study_info = f"Th√¥ng tin h·ªçc t·∫≠p:\n"
        study_info += f"- Kh·ªëi thi: {khoi_str_var.get()}\n"
        for i, mon in enumerate(mon_names):
            study_info += f"- ƒêi·ªÉm {mon}: {diem[i]}\n"
        study_info += f"- K·ªπ nƒÉng n·ªïi b·∫≠t: {skill}\n\n"
        
        result_text.insert(tk.END, study_info)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
        result_text.insert(tk.END, "K·∫æT QU·∫¢ T∆Ø V·∫§N:\n", 'header')
        result_text.tag_configure('header', font=('Helvetica', 14, 'bold'), foreground=PRIMARY_COLOR)
        
        for i, (major, prob) in enumerate(zip(top_majors, top_probs)):
            result_text.insert(tk.END, f"\n{i+1}. {major}\n", 'major')
            result_text.tag_configure('major', font=('Helvetica', 12, 'bold'))
            
            # Th√¥ng tin ng√†nh h·ªçc
            for m in majors:
                if m[0] == major:
                    khoi_thi = ", ".join([k for k, v in khoi_name_map.items() if v in m[1]])
                    result_text.insert(tk.END, f"- Kh·ªëi thi ph√π h·ª£p: {khoi_thi}\n")
                    
                    # T·ª∑ l·ªá ph√π h·ª£p
                    result_text.insert(tk.END, f"- ƒê·ªô ph√π h·ª£p: {prob*100:.1f}%\n")
                    
                    # K·ªπ nƒÉng c·∫ßn c√≥
                    skill_needed = ", ".join([skill_names[i-1] for i in m[3]])
                    result_text.insert(tk.END, f"- K·ªπ nƒÉng c·∫ßn thi·∫øt: {skill_needed}\n")
                    
                    # ƒêi·ªÉm chu·∫©n tham kh·∫£o
                    _, (min_d, max_d) = phan_bo_nganh[major]
                    result_text.insert(tk.END, f"- ƒêi·ªÉm khuy·∫øn ngh·ªã cho m·ªói m√¥n: {min_d} - {max_d}\n")
                    break
        
        result_text.config(state=tk.DISABLED)
        
        # Reset button
        submit_btn.config(text="T∆Ø V·∫§N NG√ÄNH H·ªåC", state=tk.NORMAL)
        
    except Exception as e:
        messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        submit_btn.config(text="T∆Ø V·∫§N NG√ÄNH H·ªåC", state=tk.NORMAL)

app.mainloop()
